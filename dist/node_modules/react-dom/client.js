(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

    const FunctionComponent = 0;
    const HostRoot = 3;
    const HostComponent = 5;
    const HostTest = 6;

    const NoFlags = 0b0000000;
    const Placement = 0b0000001;
    const Update = 0b0000010;
    const ChildDeletion = 0b0000100;
    const MutationMask = Placement | Update | ChildDeletion;

    class FiberNode {
        constructor(tag, pendingProps, key) {
            Object.defineProperty(this, "tag", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            Object.defineProperty(this, "stateNode", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            Object.defineProperty(this, "type", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "key", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "ref", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "return", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "sibling", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "child", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "index", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "updateQueue", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "pendingProps", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "memorizedProps", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            Object.defineProperty(this, "memorizedState", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "alternate", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // 副作用
            Object.defineProperty(this, "flags", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            Object.defineProperty(this, "subtreeFlags", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // 实例
            this.tag = tag;
            this.key = key;
            // HostComponent <div> ===> div Dom
            this.stateNode = null;
            // FunctionComponent ===> ()=>{}
            this.type = null;
            // 指向父fiberNode
            this.return = null;
            // 指向兄弟fiberNode
            this.sibling = null;
            // 指向子 fiberNode
            this.child = null;
            // 有多个同级的fiberNode index标识顺序
            this.index = 0;
            this.updateQueue = null;
            this.pendingProps = pendingProps;
            this.memorizedProps = null;
            this.memorizedState = null;
            // 与这个fiberNode相对应的fiberNode（双缓存机制）
            this.alternate = null;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
        }
    }
    class FiberRootNode {
        constructor(container, hostRootFiber) {
            Object.defineProperty(this, "container", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // 指向第一个FiberNode节点
            Object.defineProperty(this, "current", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            // 指向更新完成以后的第一个fiberNode节点，...双缓存技术
            Object.defineProperty(this, "finishedWork", {
                enumerable: true,
                configurable: true,
                writable: true,
                value: void 0
            });
            this.container = container;
            this.current = hostRootFiber;
            hostRootFiber.stateNode = this;
            this.finishedWork = null;
        }
    }
    const createWorkInProgress = (current, pendingProps) => {
        let workInProgress = current.alternate;
        if (workInProgress === null) {
            // mount
            workInProgress = new FiberNode(current.tag, pendingProps, current.key);
            workInProgress.type = current.type;
            workInProgress.stateNode = current.stateNode;
            workInProgress.alternate = current;
            current.alternate = workInProgress;
        }
        else {
            // update
            workInProgress.pendingProps = pendingProps;
            workInProgress.flags = NoFlags;
            workInProgress.subtreeFlags = NoFlags;
        }
        workInProgress.child = current.child;
        workInProgress.type = current.type;
        workInProgress.updateQueue = current.updateQueue;
        workInProgress.memorizedProps = current.memorizedProps;
        workInProgress.memorizedState = current.memorizedState;
        return workInProgress;
    };
    function createFiberFormElement(element) {
        const { type, key, props } = element;
        let fiberTag = FunctionComponent;
        if (typeof type === "string") {
            fiberTag = HostComponent;
        }
        else if (typeof type !== "function" && true) {
            console.warn("");
        }
        const fiber = new FiberNode(fiberTag, props, key);
        fiber.type = type;
        return fiber;
    }

    const createUpdate = (action) => {
        return {
            action,
        };
    };
    const createUpdateQueue = () => {
        return {
            shared: {
                pending: null,
            },
        };
    };
    const enqueueUpdate = (updateQueue, update) => {
        updateQueue.shared.pending = update;
    };
    const processUpdateQueue = (baseState, pendingUpdate) => {
        const result = {
            memorizedState: baseState,
        };
        if (pendingUpdate !== null) {
            const action = pendingUpdate.action;
            if (action instanceof Function) {
                result.memorizedState = action(baseState);
            }
            else {
                result.memorizedState = action;
            }
        }
        return result;
    };

    const supportSymbol = typeof Symbol === "function" && Symbol.for;
    const REACT_ELEMNET_TYPE = supportSymbol
        ? Symbol.for("react.element")
        : 0xeac7;

    function childReconciler(shouldTrackEffects) {
        function reconcileSingleElement(returnFiber, currentFiber, element) {
            console.log(currentFiber);
            // 根据这个element创建fiber
            const fiber = createFiberFormElement(element);
            fiber.return = returnFiber;
            return fiber;
        }
        function reconcileSingleTextNode(returnFiber, currentFiber, element) {
            console.log(currentFiber);
            const fiber = new FiberNode(HostTest, { content: element }, null);
            fiber.return = returnFiber;
            return fiber;
        }
        function placeSingleChild(fiber) {
            if (shouldTrackEffects && fiber.alternate === null) {
                // 首屏渲染
                fiber.flags |= Placement;
            }
            return fiber;
        }
        return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
            if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                    case REACT_ELEMNET_TYPE:
                        return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
                    default:
                        {
                            console.warn("no 实现的reconcile类型");
                        }
                        break;
                }
            }
            if (typeof newChild === "string" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
            }
            return null;
        };
    }
    const reconcileChildFibers = childReconciler(true);
    const mountChildFibers = childReconciler(false);

    function renderWithHooks(workInProgress) {
        const Component = workInProgress.type;
        const props = workInProgress.memorizedProps;
        return Component(props);
    }

    /**
     * @description 该方法会根据传入的Fiber节点创建子Fiber节点，并将这两个Fiber节点连接起来
     */
    const beginWork = (WorkInProgress) => {
        switch (WorkInProgress.tag) {
            case HostRoot:
                /**
                 * @description 计算状态的最新值，创造子fiberNode
                 */
                return updateHostRoot(WorkInProgress);
            case HostComponent:
                /**
                 * @description 创造子fiberNode
                 */
                return updateHostComponent(WorkInProgress);
            case HostTest:
                return null;
            case FunctionComponent:
                return updateFunctionComponent(WorkInProgress);
            default:
                {
                    console.warn("未实现的tag");
                }
                break;
        }
        return null;
    };
    function updateHostRoot(WorkInProgress) {
        // 获取初始状态
        const baseState = WorkInProgress.memorizedState;
        // 获取更新队列
        const updateQueue = WorkInProgress.updateQueue;
        // 获取判定的状态？
        const pending = updateQueue.shared.pending;
        // 清空绑定的状态
        updateQueue.shared.pending = null;
        // 消费状态
        const { memorizedState } = processUpdateQueue(baseState, pending);
        // 绑定新的状态
        WorkInProgress.memorizedState = memorizedState;
        // tag为hostRoot时 memorizedState就是子element
        const nextChildren = WorkInProgress.memorizedState;
        reconcileChildren(WorkInProgress, nextChildren);
        return WorkInProgress.child;
    }
    function updateHostComponent(workInProgress) {
        const nextProps = workInProgress.pendingProps;
        const nextChildren = nextProps.children;
        reconcileChildren(workInProgress, nextChildren);
        return workInProgress.child;
    }
    function updateFunctionComponent(workInProgress) {
        const nextChildren = renderWithHooks(workInProgress);
        reconcileChildren(workInProgress, nextChildren);
        return workInProgress.child;
    }
    function reconcileChildren(WorkInProgress, children) {
        const current = WorkInProgress.alternate;
        if (current !== null) {
            // update
            WorkInProgress.child = reconcileChildFibers(WorkInProgress, current.child, children);
        }
        else {
            WorkInProgress.child = mountChildFibers(WorkInProgress, null, children);
        }
    }

    // import { Props } from "shared/ReactTypes";
    // export function createInstance(type: string, props: Props) {
    function createInstance(type) {
        // todo 处理props
        const element = document.createElement(type);
        return element;
    }
    function createTestInstance(content) {
        return document.createTextNode(content);
    }
    function appendInitialChild(parent, child) {
        parent.appendChild(child);
    }
    const appendChildToContainer = appendInitialChild;

    let nextEffect = null;
    const commitMutationEffects = (finishedWork) => {
        nextEffect = finishedWork;
        while (nextEffect !== null) {
            // 向下遍历
            const child = nextEffect.child;
            if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
                child !== null) {
                // 子节点有可能存在subtreeFlags
                nextEffect = child;
            }
            else {
                // 找到底了或者没有subtreeFlags
                // 向上遍历
                up: while (nextEffect !== null) {
                    commitMutationEffectsOnFiber(nextEffect);
                    const sibling = nextEffect.sibling;
                    if (sibling !== null) {
                        nextEffect = sibling;
                        break up;
                    }
                    nextEffect = nextEffect.return;
                }
            }
        }
    };
    function commitMutationEffectsOnFiber(finishedWork) {
        const flags = finishedWork.flags;
        if ((flags & Placement) !== NoFlags) {
            // 存在Placement操作
            commitPlacement(finishedWork);
            finishedWork.flags &= ~Placement;
        }
        // if((flags & Update) !== NoFlags) {
        //     commotUpdate
        // }
    }
    function commitPlacement(finishedWork) {
        // 需要知道父节点
        // 需要知道fiber对应的DOM节点
        {
            console.warn("执行placement操作");
        }
        const hostParent = getHostParent(finishedWork);
        if (hostParent !== null) {
            // 找到finishedwork的dom append parent Dom中
            appendPlacementNodeIntoContainer(finishedWork, hostParent);
        }
    }
    function getHostParent(fiber) {
        let parent = fiber.return;
        while (parent) {
            const parentTag = parent.tag;
            if (parentTag === HostComponent) {
                return parent.stateNode;
            }
            if (parentTag === HostRoot) {
                return parent.stateNode.container;
            }
            parent = parent.return;
        }
        {
            console.warn("未找到host parent");
        }
        return null;
    }
    function appendPlacementNodeIntoContainer(finishedWork, hostParent) {
        if (finishedWork.tag === HostComponent || finishedWork.tag === HostTest) {
            appendChildToContainer(hostParent, finishedWork.stateNode);
            return;
        }
        const child = finishedWork.child;
        if (child !== null) {
            appendPlacementNodeIntoContainer(child, hostParent);
            let sibling = child.sibling;
            while (sibling !== null) {
                appendPlacementNodeIntoContainer(sibling, hostParent);
                sibling = sibling.sibling;
            }
        }
    }

    /**
     * @description 在“归”阶段会调用completeWork处理Fiber节点。
     */
    const completeWork = (WorkInProgress) => {
        const current = WorkInProgress.alternate;
        const newProps = WorkInProgress.memorizedProps;
        switch (WorkInProgress.tag) {
            case HostComponent:
                if (current !== null && WorkInProgress.stateNode) ;
                else {
                    // 构建dom树
                    // const instance = createInstance(WorkInProgress.type, newProps);
                    const instance = createInstance(WorkInProgress.type);
                    // 将Dom插入到树中
                    appendAllChildren(instance, WorkInProgress);
                    WorkInProgress.stateNode = instance;
                }
                bubbleProperties(WorkInProgress);
                break;
            case HostTest:
                if (current !== null && WorkInProgress.stateNode) ;
                else {
                    // 构建dom树
                    const instance = createTestInstance(newProps.content);
                    WorkInProgress.stateNode = instance;
                }
                bubbleProperties(WorkInProgress);
                break;
            case HostRoot:
                bubbleProperties(WorkInProgress);
                break;
            case FunctionComponent:
                bubbleProperties(WorkInProgress);
                break;
        }
    };
    function appendAllChildren(parent, WorkInProgress) {
        //
        let node = WorkInProgress.child;
        while (node !== null) {
            if ((node === null || node === void 0 ? void 0 : node.tag) === HostComponent || (node === null || node === void 0 ? void 0 : node.tag) === HostTest) {
                appendInitialChild(parent, node.stateNode);
            }
            else if ((node === null || node === void 0 ? void 0 : node.child) !== null) {
                node.child.return = node;
                node = node === null || node === void 0 ? void 0 : node.child;
                continue;
            }
            if (node === WorkInProgress) {
                return;
            }
            while (node.sibling === null) {
                if (node.return === null || node.return === WorkInProgress) {
                    return;
                }
                else {
                    node = node === null || node === void 0 ? void 0 : node.return;
                }
            }
            node.sibling.return = node.return;
            node = node.sibling;
        }
    }
    function bubbleProperties(WorkInProgress) {
        let subtreeFlags = NoFlags;
        let child = WorkInProgress.child;
        while (child !== null) {
            subtreeFlags |= child.subtreeFlags;
            subtreeFlags |= child.flags;
            child.return = WorkInProgress;
            child = child.sibling;
        }
        WorkInProgress.subtreeFlags |= subtreeFlags;
    }

    let WorkInProgress;
    /**
     * @description 该函数用于准备一个新的栈，将 WorkInProgress 赋值为传入的 fiber 节点。
     */
    function prepareFreshStack(root) {
        WorkInProgress = createWorkInProgress(root.current, {});
    }
    /**
     * 在fibel中调度update
     */
    function scheduleUpdateOnFiber(fiber) {
        // 调度
        const root = markUpdateFromFiberToRoot(fiber);
        renderRoot(root);
    }
    /**
     * 遍历到根节点
     */
    function markUpdateFromFiberToRoot(fiber) {
        let node = fiber;
        let parent = node.return;
        while (parent !== null) {
            node = parent;
            parent = node.return;
        }
        if (node.tag === HostRoot) {
            return node.stateNode;
        }
        return null;
    }
    /**
     * @description 该函数是 Fiber 的入口函数，用于初始化并开始 Fiber 的工作循环。
     */
    function renderRoot(root) {
        // 初始化
        prepareFreshStack(root);
        do {
            try {
                workLoop();
                break;
            }
            catch (error) {
                {
                    console.warn("发生了错误");
                }
                WorkInProgress = null;
            }
            // eslint-disable-next-line no-constant-condition
        } while (true);
        const finishedWork = root.current.alternate;
        root.finishedWork = finishedWork;
        commitRoot(root);
    }
    function commitRoot(root) {
        const finisheWork = root.finishedWork;
        if (finisheWork === null) {
            return;
        }
        {
            console.warn("commit阶段开始", finisheWork);
        }
        // 重置
        root.finishedWork = null;
        // 判断是否存在三个子阶段需要执行的操作
        const subtreeHasEffect = (finisheWork.subtreeFlags & MutationMask) != NoFlags;
        const rootHasEffect = (finisheWork.flags & MutationMask) != NoFlags;
        if (subtreeHasEffect || rootHasEffect) {
            // beforeMutation
            root.current = finisheWork;
            commitMutationEffects(finisheWork);
            // mutation
            // layout
        }
        else {
            root.current = finisheWork;
        }
    }
    /**
     * @description 该函数是 Fiber 的工作循环，用于不断地执行任务，直到任务队列为空。
     */
    function workLoop() {
        while (WorkInProgress !== null) {
            performUnitOfWork(WorkInProgress);
        }
    }
    /**
     * @description 该函数是执行单元任务，用于执行 beginWork 并将 next 赋值给 WorkInProgress，如果 next 为空，则执行 completeUnitOfWork。
     */
    function performUnitOfWork(fiber) {
        const next = beginWork(fiber);
        fiber.memorizedProps = fiber.pendingProps;
        // fiber.memorizedProps = next?.memorizedProps ?? fiber.pendingProps;
        if (next === null) {
            completeUnitOfWork(fiber);
        }
        else {
            WorkInProgress = next;
        }
    }
    /**
     * @description 该函数是执行完成任务，用于执行 completeWork，然后将 WorkInProgress 赋值为下一个 sibling，如果没有 sibling，则将返回值赋值给 node.return，最后将 WorkInProgress 赋值为 null。
     */
    function completeUnitOfWork(fiber) {
        let node = fiber;
        do {
            completeWork(node);
            const sibling = node.sibling;
            if (sibling !== null) {
                WorkInProgress = sibling;
                return;
            }
            else {
                node = node.return;
                WorkInProgress = null;
            }
        } while (node !== null);
    }

    function createContainer(container) {
        const hostRootFiber = new FiberNode(HostRoot, {}, null);
        const root = new FiberRootNode(container, hostRootFiber);
        hostRootFiber.updateQueue = createUpdateQueue();
        return root;
    }
    function updateContainer(element, root) {
        const hostRootFiber = root.current;
        const update = createUpdate(element);
        enqueueUpdate(hostRootFiber.updateQueue, update);
        scheduleUpdateOnFiber(hostRootFiber);
        return Element;
    }

    // ReactDom.createRoot(root).render(jsx)
    function createRoot(container) {
        const root = createContainer(container);
        return {
            render(element) {
                updateContainer(element, root);
            },
        };
    }
    const $$mark = "dingjunjie";

    var ReactDom = /*#__PURE__*/Object.freeze({
        __proto__: null,
        $$mark: $$mark,
        createRoot: createRoot
    });

    return ReactDom;

}));
