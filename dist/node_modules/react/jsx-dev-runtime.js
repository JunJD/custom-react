(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["jsx-dev-runtime"] = global["jsx-dev-runtime"] || {}, global["jsx-dev-runtime"].js = {})));
})(this, (function (exports) { 'use strict';

    const supportSymbol = typeof Symbol === "function" && Symbol.for;
    const REACT_ELEMNET_TYPE = supportSymbol
        ? Symbol.for("react.element")
        : 0xeac7;

    /* eslint-disable @typescript-eslint/no-explicit-any */
    // 定义一下ReactElementType的构造函数
    const ReactElement = function (type, key, ref, props) {
        const element = {
            $$typeof: REACT_ELEMNET_TYPE,
            type,
            key,
            ref,
            props,
            __mark: "junjie",
        };
        return element;
    };
    const jsx = (type, config, ...maybeChildren) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop == "key") {
                if (val !== undefined)
                    key = "ding" + val;
                continue;
            }
            if (prop == "ref") {
                if (val !== undefined)
                    ref = val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        const length = maybeChildren.length;
        if (length == 1) {
            props.children = maybeChildren[0];
        }
        else {
            props.children = maybeChildren;
        }
        return ReactElement(type, key, ref, props);
    };
    const jsxDEV = (type, config) => {
        let key = null;
        const props = {};
        let ref = null;
        for (const prop in config) {
            const val = config[prop];
            if (prop == "key") {
                if (val !== undefined)
                    key = "ding" + val;
                continue;
            }
            if (prop == "ref") {
                if (val !== undefined)
                    ref = val;
                continue;
            }
            if ({}.hasOwnProperty.call(config, prop)) {
                props[prop] = val;
            }
        }
        return ReactElement(type, key, ref, props);
    };

    exports.jsx = jsx;
    exports.jsxDEV = jsxDEV;

}));
